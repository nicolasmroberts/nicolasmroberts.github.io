install.packages(c("rgl", "fields", "MASS"))
install.packages(c("ICSNP", "expm", "FRB"))
install.packages(c("Directional", "pracma"))
library("rgl")
library("fields")
### PRELIMINARY WORK ####
# Set the working directory.
setwd("~/Desktop/20170620geologyGeometry")
# Load the necessary R libraries.
source("library/all.R")
# NOTE: Run the following line only if you have compiled C. Markov chain Monte Carlo requires C. Load the necessary library
source("libraryC/all.R")
source("JSG_statsFunctions.r")
# Load the foliation-lineation data
Follins <- geoDataFromFile("data/Follins_Ahs.csv")
# Check how many measurements there are
nrow(Follins)
# Plot foliation-lineation locations in map view
plot(
Follins$easting,
Follins$northing,
xlab = "Easting (meters)",
ylab = "Northing (meters)"
)
# Plot the data in Equal area plot. Pole to foliation (red), Lineation (cyan)
lineEqualAreaPlotTwo(lapply(Follins$rotation, function(s)
s[1, ]),
lapply(Follins$rotation, function(s)
s[2, ]))
# Plot Follins in Equal Area plots with Kamb contours (numbers are 2 sigma values)
# Poles to foliation (circles)
lineKambPlot(lapply(Follins$rotation, function(s)
s[1, ]), c(2, 6, 10, 14, 18))
# Lineations (squares)
lineKambPlot(lapply(Follins$rotation, function(s)
s[2, ]),
c(2, 6, 10, 14, 18),
shapes = c("s"))
# Plot the Follins in an Equal Volume plot (after Davis and Titus, 2017)
oriEqualVolumePlot(
Follins$rotation,
group = oriLineInPlaneGroup,
backgroundColor = "white",
curveColor = "black",
boundaryAlpha = 0.1,
colors = "black" ,
axesColors = c("black", "black", "black"),
fogStyle = "none"
)
# If you wish to save this figure, maximize the plot window on your screen before running this line. It will save to your working directory folder.
afterMaximizingWindow("Ahsahka_EqualVol1.png", "Ahsahka_EqualVol2.png")
# NOTE: Requires C. Skip if you have not compiled C. Plot 6-sigma Kamb contours for the data in an equal volume plot (after Davis and Titus, 2017)
oricKambPlot(
Follins$rotation,
group = oriLineInPlaneGroup,
multiple = 6,
backgroundColor = "white",
curveColor = "black",
boundaryAlpha = 0.1,
colors = "black",
axesColors = c("black", "black", "black"),
fogStyle = "none"
)
# Plot foliation-lineation locations in map view, colored in gray-scale by northing. This shading will be used in the following plots.
plot(
Follins$easting,
Follins$northing,
col = shades(Follins$northing),
pch = 19
)
# Set the working directory.
setwd("~/Desktop/20170620geologyGeometry")
# Load the necessary R libraries.
source("library/all.R")
# Markov chain Monte Carlo and Kamb contouring in equal volume plots require C compiler. Skip MCMC and equal volume Kamb lines if you do not wish to install C. Load the necessary library
source("libraryC/all.R")
# Load some custom functions.
source("JSG_statsFunctions.r")
# 1) Foliation only
Fols <- geoDataFromFile("data/Fols_WestMt.csv")
# Plot foliation locations in map view
plot(Fols$easting, Fols$northing, xlab = "Easting (meters)", ylab = "Northing (meters)")
# Check how many measurments there are
nrow(Fols)
# 2) Foliation-lineation pairs
Follins <- geoDataFromFile("data/Follins_WestMt.csv")
# Plot foliation-lineation locations in map view
plot(
Follins$easting,
Follins$northing,
xlab = "Easting (meters)",
ylab = "Northing (meters)"
)
# Check how many measurements there are
nrow(Follins)
# Define the geographic criteria that defines the different domains
Fols_northCrit <- Fols$northing > 4922736
Fols_centerCrit <- Fols$northing < 4922736 & Fols$northing > 4919205
Fols_southCrit <- Fols$northing < 4919205
# Create a new column in the dataframe in which to store the domain information
Fols$domain <- replicate(nrow(Fols), 1)
# Classify the foliation-only dataset by domain
Fols$domain[Fols_northCrit] <- 1
Fols$domain[Fols_centerCrit] <- 2
Fols$domain[Fols_southCrit] <- 3
# Plot the locations of the foliation-only data in map view, each domain a different color.
plot(
x = Fols$easting,
y = Fols$northing,
xlab = "Easting (meters)",
ylab = "Northing (meters)",
col = hues(Fols$domain),
pch = 19
)
# Return the number of datapoints in each domain.
length(Fols$domain[Fols_northCrit])
length(Fols$domain[Fols_centerCrit])
length(Fols$domain[Fols_southCrit])
# Define the geographic criteria that defines the different domains
Follins_northCrit <-  Follins$northing > 4922736
Follins_centerCrit <- Follins$northing < 4922736 & Follins$northing > 4919205
Follins_southCrit <-  Follins$northing < 4919205
# Create a new column in the dataframe in which to store the domain information
Follins$domain <- replicate(nrow(Follins), 1)
# Classify the foliation-lineation dataset by domain
Follins$domain[Follins_northCrit] <- 1
Follins$domain[Follins_centerCrit] <- 2
Follins$domain[Follins_southCrit] <- 3
# Plot the locations of the foliation-lineation data in map view, each domain a different color.
plot(
x = Follins$easting,
y = Follins$northing,
xlab = "Easting (meters)",
ylab = "Northing (meters)",
col = hues(Follins$domain),
pch = 19
)
# Return the number of datapoints in each domain.
length(Follins$domain[Follins_northCrit])
length(Follins$domain[Follins_centerCrit])
length(Follins$domain[Follins_southCrit])
# Three Wellner tests (Wellner, 1979), one for each pair of domains. Each test is based on 10,000 permutations. This tests not only if the samples come from the populations with the same mean, but also with the same dispersion.
lineWellnerInference(Fols$pole[Fols_northCrit], Fols$pole[Fols_southCrit], 10000)
lineWellnerInference(Fols$pole[Fols_northCrit], Fols$pole[Fols_centerCrit], 10000)
lineWellnerInference(Fols$pole[Fols_centerCrit], Fols$pole[Fols_southCrit], 10000)
# Three Watson tests that assume large sample size (Mardia and Jupp, 2000), one for each pair of domains.
lineLargeMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_southCrit]))
# Three Watson tests that assume large sample size (Mardia and Jupp, 2000), one for each pair of domains.
lineLargeMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_southCrit]))
# Three Watson tests that assume large sample size (Mardia and Jupp, 2000), one for each pair of domains.
lineLargeMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_southCrit]))
lineLargeMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_centerCrit]))
lineLargeMultiSampleWatsonInference(list(Fols$pole[Fols_centerCrit], Fols$pole[Fols_southCrit]))
# Three Watson tests that assume tightly concentrated datasets (Mardia and Jupp, 2000), one for each pair of domains.
lineConcentratedMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_southCrit]))
lineConcentratedMultiSampleWatsonInference(list(Fols$pole[Fols_northCrit],  Fols$pole[Fols_centerCrit]))
lineConcentratedMultiSampleWatsonInference(list(Fols$pole[Fols_centerCrit], Fols$pole[Fols_southCrit]))
# Perform the bootstrapping routine for each domain. Each bootstrapped dataset is based on 10,000 iterations.
Fols_northBoots <-  lineBootstrapInference(Fols$pole[Fols_northCrit], 10000, numPoints = 50)
Fols_centerBoots <- lineBootstrapInference(Fols$pole[Fols_centerCrit], 10000, numPoints = 50)
Fols_southBoots <-  lineBootstrapInference(Fols$pole[Fols_southCrit], 10000, numPoints = 50)
# Plot data for each domain. Northern (red), central (green), southern (blue)
lineEqualAreaPlotThree(
Fols$pole[Fols_northCrit],
Fols$pole[Fols_centerCrit],
Fols$pole[Fols_southCrit]
)
# Plot the bootstrapped mean clouds for each domain.  Northern (red), central (green), southern (blue)
lineEqualAreaPlotThree(
Fols_northBoots$bootstraps,
Fols_centerBoots$bootstraps,
Fols_southBoots$bootstraps
)
# Plot the bootstrapped mean clouds with 95% confidence ellipses superimposed.  Northern (red), central (green), southern (blue)
lineEqualAreaPlotThree(
list(Fols_northBoots$center),
list(Fols_centerBoots$center),
list(Fols_southBoots$center),
curves = list(
Fols_northBoots$points,
Fols_centerBoots$points,
Fols_southBoots$points
)
)
# Create empty lists to store data
northSouthDiff <- list()
# Assign variables for the orientations of all bootstrapped means.
northB <- Fols_northBoots$bootstraps
southB <- Fols_southBoots$bootstraps
# Calculate the smallest possible rotations that bring means from the northern bootstrap cloud to the southern bootstrap clouds.
count = 1
for (i in 1:100) {
for (n in i:100) {
northSouthDiff$rotation[[count]] = rotSmallestRotationFromTwoLines(northB[[i]], southB[[n]])
if (n < 1000) {
count = count + 1
}
}
}
# Display the raw results of the preceting for loop
northSouthDiff
# Plot these rotations in an equal volume plot
oriEqualVolumePlot(
northSouthDiff$rotation,
group = oriLineInPlaneGroup,
simplePoints = TRUE
)
# Compute the axis and rotation amount from all the rotations
Fols_angleAxis <- lapply(northSouthDiff$rotation, function(s) rotAxisAngleFromMatrix(s))
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
lapply(Fols_angleAxis, function(s) c(s[1], s[2], s[3])),
shapes = '.'
)
#Identify the rotation axes
rotationAxes <- lapply(Fols_angleAxis, function(s) c(s[1], s[2], s[3]))
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
rotationAxes,
shapes = '.'
)
#Identify the rotation axes
rotationAxes <- lapply(Fols_angleAxis, function(s) c(s[1], s[2], s[3]), numPoints= 50)
rotationAxisBootstrap <- lineBootstrapInference(rotationAxes, 10000, numPoints= 50)
rotationAxisBootstrap <- lineBootstrapInference(rotationAxes, 1000, numPoints= 50)
rotationAXisBootstrap$boots
lineEqualAreaPlot(
points= rotationAxisBootstrap$bootstraps, curves = rotationAxisBootstrap$points
)
lineEqualAreaPlot(
points= rotationAxisBootstrap$bootstraps, curves = rotationAxisBootstrap$points
)
lineEqualAreaPlot(
curves = rotationAxisBootstrap$points
)
#Identify the rotation axes
rotationAxes <- lapply(Fols_angleAxis, function(s) c(s[1], s[2], s[3]))
rotationAxisBootstrap$bootstraps
lineEqualAreaPlot(
curves = list(rotationAxisBootstrap$points)
)
lineEqualAreaPlot(
list(rotationAxisBootstrap$bootstraps)
)
lineEqualAreaPlot(
rotationAxisBootstrap$bootstraps
)
rotationAxisMean <- lineProjectedMean(rotationAxes)
inf <- rayMahalanobisInference(rotationAxes, rotationAxisMean, ...)
inf <- rayMahalanobisInference(rotationAxes, rotationAxisMean)
inf
rotationAxisMean <- lineProjectedMean(rotationAxes)
inf <- rayMahalanobisInference(rotationAxes, rotationAxisMean, numPoints=100)
inf
lineEqualAreaPlot(curves = inf$points)
lineEqualAreaPlot(curves = list(inf$points))
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
rotationAxes,
curves = list(inf$points)
shapes = '.'
colors = "orange"
)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
rotationAxes,
curves = list(inf$points),
shapes = '.',
colors = "orange"
)
inf
eigen(inf$covarInv)
inverse(inf$covarInv)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
c(rotationAxes, rotationAxisMean)
curves = list(inf$points),
shapes = '.',
colors = c(replicate(length(rotationAxes), "orange"), "black")
)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
c(rotationAxes, rotationAxisMean),
curves = list(inf$points),
shapes = '.',
colors = c(replicate(length(rotationAxes), "orange"), "black")
)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
c(rotationAxes, list(rotationAxisMean)),
curves = list(inf$points),
shapes = '.',
colors = c(replicate(length(rotationAxes), "orange"), "black")
)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
c(rotationAxes, list(rotationAxisMean)),
curves = list(inf$points),
shapes = c(replicate(length(rotationAxes),'.'), "c")
colors = c(replicate(length(rotationAxes), "orange"), "black")
)
# Plot the rotation axes in an equal area plot
lineEqualAreaPlot(
c(rotationAxes, list(rotationAxisMean)),
curves = list(inf$points),
shapes = c(replicate(length(rotationAxes),'.'), "c"),
colors = c(replicate(length(rotationAxes), "orange"), "black")
)
